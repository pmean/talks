---
title: "Splines, part 03"
format: pptx
editor: source
---

```{r}
#| label: 03-setup
#| message: false
#| warning: false

library(splines)
library(tidyverse)
```

## B-splines

-   Mathematically equivalent form
-   Much less collinearity

::: notes

B-splines provide a solution with less issues of multi-collinearity.

:::

```{r}
#| label: 03-b-splines

b_spline <- bs(xm$c2, knots=c(5, 10, 15), degree=3, intercept=TRUE)
```


```{r}
#| label: 03-bplot

n <- ncol(b_spline)
bplot <- list(rep(NULL, n))
for (j in 1:n) {
  dat <- cbind(xm$c2, b_spline[ , j])
  display_curve(dat, "Cubic B-spline terms") |>
    display_dots(dat[1:21, ]) -> bplot[[j]]
}
```

## B-spline, 1

```{r}
#| label: 03-bplot-1

bplot[[1]]
```

::: notes


The individual columns represent piecwise cubic polynomials. As I cycle through these graphs, notice how they are concentrated in certain intervals and there is only a partial overlap between these intervals. Also notice how they transition smoothly to zero outside those intervals.


:::

## B-spline, 2

```{r}
#| label: 03-bplot-2

bplot[[2]]
```

## B-spline, 3

```{r}
#| label: 03-bplot-3

bplot[[3]]
```

## B-spline, 4

```{r}
#| label: 03-bplot-4

bplot[[4]]
```

## B-spline, 5

```{r}
#| label: 03-bplot-5

bplot[[5]]
```

## B-spline, 6

```{r}
#| label: 03-bplot-6

bplot[[6]]
```

## B-spline, 7

```{r}
#| label: 03-bplot-7

bplot[[7]]
```

## B-splines have less issues with multicollinearity.

```{r}
#| label: 03-cor

b_spline |>
  cor() |>
  data.frame() |>
  round(2) |>
  gt()
```

::: notes

Although there is some correlation, this not nearly as bad as the piecewise approach.

:::

## B-spline fit to the artificial data

```{r}
#| label: 03-b-spline-fit

lm(xm$y~b_spline) %>%
  augment(newdata=xm) %>%
  select(c2, .fitted) %>%
    display_curve("Cubic spline fit to the data") %>%
    display_dots(simulated_example)
```

## Natural splines

-   B-spline restrictions
    -   Continuity
    -   Smoothness
-   Natural spline additional restriction
    -   Linear extrapolation beyond the outside knots

::: notes

A variant on B splines are natural splines (also called restricted cubic splines). These splines place an additional restriction to the left of the first X value and to the right of the last X value. The spline is constrained to be linear at both extremes. This makes practical sense, as there is less data at the extremes, making estimation of a complex cubic function here worrisome. This also makes extrapolation outside of the range of data less problematic. Cubic polynomials have the potential of extreme shifts and if these occur outside the range of the data, they could lead to some awful extrapolations.

You should always be very careful, of course, as any effort to extrapolate beyond the range of data is [dangerous][sim3]. Nevertheless, restricting the extrapolation to a linear function is probably safer than letting the cubic polynomial wiggle around.

:::

```{r}
#| label: 03-ns
extra_x_values <- setdiff(seq(-5, 25, by=1/64), simulated_example$x)
extended_x <- c(simulated_example$x, extra_x_values)
extended_y <- c(simulated_example$y, rep(NA, length(extra_x_values)))
natural_spline <- ns(
  extended_x, 
  knots=c(5, 10, 15), 
  Boundary.knots=c(0, 20),
  intercept=TRUE)
```

```{r}
#| label: 03-nplot

n <- ncol(natural_spline)
nplot <- list(rep(NULL, n))
for (j in 1:n) {
  dat <- cbind(extended_x, natural_spline[ , j])
  display_curve(dat, "Cubic B-spline terms") |>
    display_dots(dat[1:21, ]) -> nplot[[j]]
}
```

## Natural spline, 1

```{r}
#| label: 03-nplot-1

nplot[[1]]
```

## Natural spline, 2

```{r}
#| label: 03-nplot-2

nplot[[2]]
```

## Natural spline, 3

```{r}
#| label: 03-nplot-3

nplot[[3]]
```

## Natural spline, 4

```{r}
#| label: 03-nplot-4

nplot[[4]]
```

## Natural spline, 5

```{r}
#| label: 03-nplot-5

nplot[[5]]
```


## Natural spline fit



```{r}
#| label: 03-natural-spline-fit

lm(extended_y~natural_spline) |>
  augment(newdata=natural_spline) |>
  data.frame() |>
  bind_cols(data.frame(x=extended_x)) |>
  select(x, .fitted) |>
    display_curve("Natural spline fit to the data") |>
    display_dots(simulated_example)
```

::: notes

Here is the natural spline fit to your simulated dataset.

You can probably see the linearity at the extremes of the data.

:::
